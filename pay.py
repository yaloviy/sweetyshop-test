import hashlib
import json
import time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    WebAppInfo, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    LabeledPrice,
    PreCheckoutQuery,
)
from urllib.parse import quote

BOT_TOKEN = "7843913643:AAF7EEl-lz98UGblX16PyxOmJq60Mha8hZU"
PROVIDER_TOKEN = "1744374395:TEST:cf94e0f4339917b14ba4"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()




@dp.message(Command("start"))
async def start(message: types.Message):
    first_name = quote(message.from_user.first_name or "")
    last_name = quote(message.from_user.last_name or "")
    username = quote(message.from_user.username or "")
    
    web_app_url = f"https://yaloviy.github.io/sweetyshop-test/catalog?firstname={first_name}&lastname={last_name}&username={username}"

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=web_app_url))],
            [KeyboardButton(text="–û –Ω–∞—Å")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω SweetyShop!‚ú®\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã",
        reply_markup=markup
    )
    

@dp.message(lambda message: message.text == "–û –Ω–∞—Å")
async def send_info(message: types.Message):
    info_text = (
        "üõçÔ∏è <strong>SweetyShop</strong> - –≤–∞—à —Å–ª–∞–¥–∫–∏–π —Ä–∞–π —Å 2013 –≥–æ–¥–∞! üç´üç¨\n\n"
        "–ú—ã ‚Äì –∫–æ–º–∞–Ω–¥–∞ –æ–ø—ã—Ç–Ω—ã—Ö –∫–æ–Ω–¥–∏—Ç–µ—Ä–æ–≤ —Å 12-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, —Å–æ–∑–¥–∞—é—â–∞—è –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –¥–µ—Å–µ—Ä—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º –≤–∫—É—Å–æ–º.\n\n"
        "<em>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</em>\n"
        "‚Ä¢ ‚ú® –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Äì –≥–æ—Ç–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ üßë‚Äçüç≥ –†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äì –∫–∞–∂–¥–æ–µ –ª–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ —Å –¥—É—à–æ–π –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º\n"
        "‚Ä¢ üéÅ –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å–ª–∞–¥–æ—Å—Ç–∏ ‚Äì —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ, —á–µ–≥–æ –Ω–µ—Ç –Ω–∏ —É –∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ!\n\n"
        "<em>–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –Ω–∞–π–¥—ë—Ç–µ:</em>\n"
        "‚Ä¢ üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã ‚Äì –∞–¥—Ä–µ—Å–∞ –∫–∞—Ñ–µ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ üõí –¢–æ–≤–∞—Ä—ã ‚Äì –æ—Ç –∫–ª–∞—Å—Å–∏–∫–∏ –¥–æ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤\n"
        "‚Ä¢ üîí –ì–∞—Ä–∞–Ω—Ç–∏–∏ ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏\n\n"
        "–° –ª—é–±–æ–≤—å—é, –≤–∞—à <strong>SweetyShop!</strong>üç∞"
        
    )
    await message.answer(info_text, parse_mode="HTML")

    try:
        await message.delete()
    except Exception as e:
            print(f"{e}")

orders_storage = {}

@dp.message()
async def handle_webapp_data(message: types.Message):
    if message.web_app_data: 
        try:
            data = json.loads(message.web_app_data.data)
            
            total = 0
            
            prices = [
                LabeledPrice(label=f"{product["name"]} x{product['count']}", amount=product["price"] * product['count'] * 100)
                for product in data
            ]
            
            order_data = f"{message.chat.id}_{int(time.time())}"
            
            payload = hashlib.md5(order_data.encode()).hexdigest()
            
            orders_storage[payload] = {
                "products": data,
                "user_id": message.chat.id,
                "order_id": payload
            }
            
            response_text = "üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n\n"

            for product in data:
                response_text += (
                    f"‚Ä¢ {product['name']}\n"
                    f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['count']}\n"
                    f"   –¶–µ–Ω–∞: {product['price']}‚ÇΩ x {product['count']} = {product['price'] * product['count']}‚ÇΩ\n\n"
                )
                total += product['price'] * product['count']

            response_text += f"üí≥ *–ò—Ç–æ–≥–æ: {total}‚ÇΩ*\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã."

            await message.answer(response_text, parse_mode="Markdown")
            
            await bot.send_invoice(
                chat_id=message.chat.id,
                title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{payload}",
                description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {sum(product['count'] for product in data)}",
                provider_token=PROVIDER_TOKEN,
                currency="RUB",
                prices=prices,
                payload = payload,
                start_parameter="create_invoice_SweetyShop",
                need_name=True,
                need_phone_number=True,
                need_shipping_address=True
            )


        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@dp.pre_checkout_query()
async def pre_checkout_handler(query: PreCheckoutQuery):
    print(f"PreCheckout received: {query}")
    await bot.answer_pre_checkout_query(query.id, ok=True)
    
    order_data = orders_storage[query.invoice_payload]
    products_text = "\n".join(
        f"‚Ä¢ {p['name']} √ó{p['count']} - {p['price']}‚ÇΩ"
        for p in order_data["products"]
    )
    
    if "TEST" in PROVIDER_TOKEN:
        await bot.send_message(
            chat_id=query.from_user.id,
            text= f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                  f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑ –≤ SweetyShop!\n\n"
                  f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{query.invoice_payload}</code>\n"
                  f"<b>–°—É–º–º–∞:</b> {query.total_amount / 100}‚ÇΩ",
                  parse_mode="HTML"
        )

        admin = "5339434086"
        await bot.send_message(
            chat_id=admin,
            text=f"üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={query.from_user.id}'>{query.from_user.first_name}</a>\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>+{query.order_info.phone_number if query.order_info else '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n\n"
                f"üì¶ <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{query.invoice_payload}</code>\n\n"
                f"üè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
                f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {query.order_info.shipping_address.country_code}\n"
                f"‚Ä¢ –ì–æ—Ä–æ–¥: {query.order_info.shipping_address.city}\n"
                f"‚Ä¢ –£–ª–∏—Ü–∞: {query.order_info.shipping_address.street_line1}\n"
                f"‚Ä¢ –î–æ–ø. –∞–¥—Ä–µ—Å: {query.order_info.shipping_address.street_line2 if query.order_info.shipping_address.street_line2 else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"‚Ä¢ –ò–Ω–¥–µ–∫—Å: {query.order_info.shipping_address.post_code}\n\n"
                f"üõçÔ∏è <b>–¢–æ–≤–∞—Ä—ã:</b>\n{products_text}\n\n"
                f"üí≥<b>–û–ø–ª–∞—Ç–∞:</b> {query.total_amount/100}‚ÇΩ",
            parse_mode="HTML"
        )
        
        
        
    
if __name__ == "__main__":
    print("Bot start")
    dp.run_polling(bot)